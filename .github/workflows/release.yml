name: Build and Release

on:
  workflow_dispatch: 
  push:
    tags:
      - 'v*.*.*'

permissions:
  contents: write

jobs:
  build:
    runs-on: windows-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '6.x'

      - name: Restore dependencies
        run: dotnet restore

      - name: Build
        run: dotnet build -c Release

      - name: Publish
        run: dotnet publish -c Release -r win-x64 --self-contained

      - name: Get latest tag
        id: get_tag
        shell: pwsh
        run: |
          Write-Host "Fetching tags"
          git fetch --tags
          Write-Host "Finding the latest tag"
          $latest_tag = git describe --tags $(git rev-list --tags --max-count=1)
          Write-Host "Latest tag: $latest_tag"
          if ([string]::IsNullOrEmpty($latest_tag)) {
          $latest_tag = "v1.0.0"
          }
          $tag_prefix = "v"
          $version = $latest_tag -replace '^v'
          $version_parts = $version -split '\.'
          $major = [int]$version_parts[0]
          $minor = [int]$version_parts[1]
          $patch = [int]$version_parts[2]

          # Increment the patch version and check if it exists
          $new_patch = $patch + 1
          $new_tag = "$tag_prefix$major.$minor.$new_patch"
  
          # Check if the new tag already exists
          while (git tag -l $new_tag) {
            $new_patch++
            $new_tag = "$tag_prefix$major.$minor.$new_patch"
          }
          Write-Host "Neuer Tag: $new_tag"
          echo "tag=$new_tag" >> $env:GITHUB_ENV
          
      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v1
        with:
          tag_name: ${{ env.tag }}
          release_name: ${{ env.tag }}
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload .exe to Release
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./Nt.Utility/bin/Release/net6.0-windows/win-x64/publish/Nt.Utility.exe
          asset_name: Nt.Utility.exe
          asset_content_type: application/octet-stream
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}